  package rbp.registry.block.cake.custom_cake.bread;

  import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockState;
  import net.minecraft.block.Material;
  import net.minecraft.entity.ItemEntity;
  import net.minecraft.item.ItemStack;
  import net.minecraft.sound.BlockSoundGroup;
  import net.minecraft.util.ActionResult;
  import net.minecraft.util.Hand;
  import net.minecraft.util.shape.VoxelShape;
  import net.minecraft.world.World;
  import rbp.registry.ModRegistry;

import net.minecraft.state.property.Properties;
   
   public class BreadBlock extends net.minecraft.block.Block {
	  
	  public static final int MAX_BITES = 6;
	  
	  public static net.minecraft.state.property.IntProperty BITES;
	  
	  
	  protected static final float field_31047 = 1.0f;
	  
	  protected static final float field_31048 = 2.0f;
	  
	  protected static net.minecraft.util.shape.VoxelShape[] BITES_TO_SHAPE;
	  
	  public BreadBlock() {
		 super(FabricBlockSettings.of(Material.CAKE).ticksRandomly().sounds(BlockSoundGroup.WOOL).nonOpaque());
	  }
	  
	  public net.minecraft.util.shape.VoxelShape getOutlineShape(net.minecraft.block.BlockState state, net.minecraft.world.BlockView world, net.minecraft.util.math.BlockPos pos, net.minecraft.block.ShapeContext context) {
		return null;
	  }
	  
	  public net.minecraft.util.ActionResult onUse(net.minecraft.block.BlockState state, net.minecraft.world.World world, net.minecraft.util.math.BlockPos pos, net.minecraft.entity.player.PlayerEntity player, net.minecraft.util.Hand hand, net.minecraft.util.hit.BlockHitResult hit) {
	   return null;
	  }
	  protected static net.minecraft.util.ActionResult tryEat(net.minecraft.world.WorldAccess world, net.minecraft.util.math.BlockPos pos, net.minecraft.block.BlockState state, net.minecraft.entity.player.PlayerEntity player) {
		//helped fix : Reece
		
		/*if (stack.getItem() == Items.IRON_SWORD || player.getStackInHand(Hand.OFF_HAND).getItem() == Items.IRON_SWORD)*/ 
         if (player.getStackInHand(Hand.MAIN_HAND).getItem() != ModRegistry.IRON_KNIFE && player.getStackInHand(Hand.MAIN_HAND).getItem() != ModRegistry.GOLDEN_KNIFE && player.getStackInHand(Hand.OFF_HAND).getItem() != ModRegistry.IRON_KNIFE && player.getStackInHand(Hand.OFF_HAND).getItem() != ModRegistry.GOLDEN_KNIFE)
     {
          return ActionResult.PASS;
       } else if (!player.canConsume(true)) {
          return ActionResult.PASS;
       } else {
          world.spawnEntity(new ItemEntity((World) world, pos.getX(), pos.getY(), pos.getZ(), new ItemStack(ModRegistry.BREAD_SLICE, 1)));
          int i = (Integer)state.get(BITES);
          if (i < 6) {
             world.setBlockState(pos, (BlockState)state.with(BITES, i + 1), 3);
          } else {
             world.removeBlock(pos, false);
          }

          return ActionResult.SUCCESS;
       }
    }
	  
	  public net.minecraft.block.BlockState getStateForNeighborUpdate(net.minecraft.block.BlockState state, net.minecraft.util.math.Direction direction, net.minecraft.block.BlockState neighborState, net.minecraft.world.WorldAccess world, net.minecraft.util.math.BlockPos pos, net.minecraft.util.math.BlockPos neighborPos) {
		return null;
	  }
	  
	  public boolean canPlaceAt(net.minecraft.block.BlockState state, net.minecraft.world.WorldView world, net.minecraft.util.math.BlockPos pos) {
		return false;
	  }
	  
	  protected  void appendProperties(net.minecraft.state.StateManager.Builder<net.minecraft.block.Block,net.minecraft.block.BlockState> builder) {
	  }
	  
	  public int getComparatorOutput(net.minecraft.block.BlockState state, net.minecraft.world.World world, net.minecraft.util.math.BlockPos pos) {
		return 0;
	  }
	  
	  public static int getComparatorOutput(int bites) {
		return 0;
	  }
	  
	  public boolean hasComparatorOutput(net.minecraft.block.BlockState state) {
		return false;
	  }
	  
	  public boolean canPathfindThrough(net.minecraft.block.BlockState state, net.minecraft.world.BlockView world, net.minecraft.util.math.BlockPos pos, net.minecraft.entity.ai.pathing.NavigationType type) {
		return false;
	  }
	  
	  static {
		BITES = Properties.BITES;
		BITES_TO_SHAPE = new VoxelShape[]{
			Block.createCuboidShape(2.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D),
			Block.createCuboidShape(3.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D), 
			Block.createCuboidShape(5.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D), 
			Block.createCuboidShape(7.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D), 
			Block.createCuboidShape(9.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D), 
			Block.createCuboidShape(11.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D), 
			Block.createCuboidShape(13.0D, 0.0D, 4.0D, 14.0D, 4.2D, 12.0D)};
	 }
}

