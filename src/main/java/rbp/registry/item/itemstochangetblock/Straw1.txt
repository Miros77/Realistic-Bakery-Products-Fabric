package rbp.registry.item.itemstochangetblock;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.BlockState;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.*;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.world.World;
import rbp.registry.ModRegistry;
import net.minecraft.item.HoeItem;

import java.util.Map;

public class Straw extends Item {

   public static final Map<Block, BlockState> TILLED_BLOCKS;

   public Straw(Item.Settings settings) {
       super(settings);
   }


public ActionResult useOnBlock(ItemUsageContext context, PlayerEntity player, Hand hand) {
      
      World world = context.getWorld();
      BlockPos blockPos = context.getBlockPos();
      ItemStack itemStack = player.getStackInHand(hand);
      Item item = itemStack.getItem();
      if (context.getSide() != Direction.DOWN && world.getBlockState(blockPos.up()).isAir()) {
         BlockState blockState = (BlockState)TILLED_BLOCKS.get(world.getBlockState(blockPos).getBlock());
         if (blockState != null) {
            PlayerEntity playerEntity = context.getPlayer();
            world.playSound(playerEntity, blockPos, SoundEvents.ITEM_HOE_TILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
            if (!world.isClient) {
               world.setBlockState(blockPos, blockState, 11);
            }  
            // damage item
             if (!player.abilities.creativeMode) {
                 itemStack.decrement(1);
             }

            return ActionResult.success(world.isClient);
         } 
      }


      
      return ActionResult.SUCCESS;
}


   static {

      TILLED_BLOCKS = Maps.newHashMap(ImmutableMap.of(
         ModRegistry.STRAWBERRYBUSH, ModRegistry.STRAWBERRYBUSH_HAY.getDefaultState()
         ));
   }
}

